// Code generated by MockGen. DO NOT EDIT.
// Source: appointment.go

// Package appointmentmock is a generated GoMock package.
package appointmentmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	appointment "github.com/mrbryside/rbh/domain/interview/appointment/domain/appointment"
	service "github.com/mrbryside/rbh/domain/interview/appointment/service"
)

// MockAppointmentServicer is a mock of AppointmentServicer interface.
type MockAppointmentServicer struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentServicerMockRecorder
}

// MockAppointmentServicerMockRecorder is the mock recorder for MockAppointmentServicer.
type MockAppointmentServicerMockRecorder struct {
	mock *MockAppointmentServicer
}

// NewMockAppointmentServicer creates a new mock instance.
func NewMockAppointmentServicer(ctrl *gomock.Controller) *MockAppointmentServicer {
	mock := &MockAppointmentServicer{ctrl: ctrl}
	mock.recorder = &MockAppointmentServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentServicer) EXPECT() *MockAppointmentServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAppointmentServicer) Create(arg0 service.CreateAppointmentDto) (appointment.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(appointment.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAppointmentServicerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppointmentServicer)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockAppointmentServicer) GetAll(arg0 service.GetAllAppointmentDto) (appointment.Aggregates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(appointment.Aggregates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAppointmentServicerMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAppointmentServicer)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockAppointmentServicer) GetById(arg0 uint) (appointment.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(appointment.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAppointmentServicerMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAppointmentServicer)(nil).GetById), arg0)
}

// UpdateById mocks base method.
func (m *MockAppointmentServicer) UpdateById(arg0 service.UpdateAppointmentDto) (appointment.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", arg0)
	ret0, _ := ret[0].(appointment.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockAppointmentServicerMockRecorder) UpdateById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockAppointmentServicer)(nil).UpdateById), arg0)
}
