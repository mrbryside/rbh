// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package commentmock is a generated GoMock package.
package commentmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comment "github.com/mrbryside/rbh/domain/interview/appointment/domain/comment"
	service "github.com/mrbryside/rbh/domain/interview/appointment/service"
)

// MockCommentServicer is a mock of CommentServicer interface.
type MockCommentServicer struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServicerMockRecorder
}

// MockCommentServicerMockRecorder is the mock recorder for MockCommentServicer.
type MockCommentServicerMockRecorder struct {
	mock *MockCommentServicer
}

// NewMockCommentServicer creates a new mock instance.
func NewMockCommentServicer(ctrl *gomock.Controller) *MockCommentServicer {
	mock := &MockCommentServicer{ctrl: ctrl}
	mock.recorder = &MockCommentServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentServicer) EXPECT() *MockCommentServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentServicer) Create(arg0 service.CreateCommentDto) (comment.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(comment.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentServicerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentServicer)(nil).Create), arg0)
}

// DeleteById mocks base method.
func (m *MockCommentServicer) DeleteById(commentId, creatorId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", commentId, creatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockCommentServicerMockRecorder) DeleteById(commentId, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockCommentServicer)(nil).DeleteById), commentId, creatorId)
}

// GetAllByAppointmentId mocks base method.
func (m *MockCommentServicer) GetAllByAppointmentId(arg0 uint) ([]comment.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByAppointmentId", arg0)
	ret0, _ := ret[0].([]comment.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByAppointmentId indicates an expected call of GetAllByAppointmentId.
func (mr *MockCommentServicerMockRecorder) GetAllByAppointmentId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByAppointmentId", reflect.TypeOf((*MockCommentServicer)(nil).GetAllByAppointmentId), arg0)
}

// UpdateById mocks base method.
func (m *MockCommentServicer) UpdateById(arg0 service.UpdateCommentDto) (comment.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", arg0)
	ret0, _ := ret[0].(comment.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockCommentServicerMockRecorder) UpdateById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockCommentServicer)(nil).UpdateById), arg0)
}
